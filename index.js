// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Pool, Promise, debug, r;

  debug = require('debug')('rethinkdb:pool');

  Pool = require('generic-pool').Pool;

  r = require('rethinkdb');

  Promise = require('bluebird');

  module.exports = function(options, max, min, idleTimeoutMillis, log) {
    var acq, acquire, pool;
    pool = Pool({
      name: 'rethinkdb',
      create: function(done) {
        return r.connect(options, done);
      },
      destroy: function(connection) {
        return connection.close();
      },
      log: log || debug,
      max: max || 10,
      min: min || 2,
      idleTimeoutMillis: idleTimeoutMillis || 30000
    });
    acq = Promise.promisify(pool.acquire);
    acquire = function() {
      return acq().disposer(function(connection) {
        var e;
        try {
          return pool.release(connection);
        } catch (_error) {
          e = _error;
          return debug('failed to release connection %s', e.message);
        }
      });
    };
    pool.r = r;
    pool.Promise = Promise;
    pool.run = function(query, done) {
      var promise;
      debug('querying');
      promise = Promise.using(acquire(), function(connection) {
        debug('acquired connection');
        return query.run(connection).then(function(cursorOrResult) {
          debug('resolving');
          return (cursorOrResult != null ? typeof cursorOrResult.toArray === "function" ? cursorOrResult.toArray() : void 0 : void 0) || cursorOrResult;
        });
      });
      if (done != null) {
        return promise.nodeify(done);
      } else {
        return promise;
      }
    };
    return pool;
  };

}).call(this);
